id: 07_aws_taxi_fhv_scheduled
namespace: zoomcamp
description: |
  Best to add a label `backfill:true` from the UI to track executions created via a backfill.
  CSV data used here comes from: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [yellow, green, fhv]
    defaults: yellow

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  s3_bucket_file: "s3://{{kv('AWS_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy_MM')}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | zcat > {{render(vars.file)}}

  - id: upload_to_aws_s3_bucket
    type: "io.kestra.plugin.aws.s3.Upload"
    from: "{{render(vars.data)}}"
    key: "csv/{{inputs.taxi}}/{{render(vars.file)}}"
    bucket: "{{kv('AWS_BUCKET_NAME')}}"

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'yellow' }}"
    then:
      - id: athena_yellow_tripdata
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/iceberg/"
        query: |
          CREATE TABLE IF NOT EXISTS {{ kv('AWS_ATHENA_DATABASE') }}.{{inputs.taxi}}_tripdata_iceberg (
            unique_row_id binary            COMMENT 'A unique identifier for the trip, generated by hashing key trip attributes.',
            filename string                 COMMENT 'The source filename from which the trip data was loaded.',
            VendorID string                 COMMENT 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.',
            tpep_pickup_datetime timestamp  COMMENT 'The date and time when the meter was engaged',
            tpep_dropoff_datetime timestamp COMMENT 'The date and time when the meter was disengaged',
            passenger_count int             COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance double            COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            RatecodeID string               COMMENT 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride',
            store_and_fwd_flag string       COMMENT 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip',
            PULocationID string             COMMENT 'TLC Taxi Zone in which the taximeter was engaged',
            DOLocationID string             COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            payment_type int                COMMENT 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6=Voided trip',
            fare_amount double              COMMENT 'The time-and-distance fare calculated by the meter',
            extra double                    COMMENT 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges',
            mta_tax double                  COMMENT '$0.50 MTA tax that is automatically triggered based on the metered rate in use',
            tip_amount double               COMMENT 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.',
            tolls_amount double             COMMENT 'Total amount of all tolls paid in trip.',
            improvement_surcharge double    COMMENT '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.',
            total_amount double             COMMENT 'The total amount charged to passengers. Does not include cash tips.',
            congestion_surcharge double     COMMENT 'Congestion surcharge applied to trips in congested zones',
            airport_fee double              COMMENT '$1.25 for pick up only at LaGuardia and John F. Kennedy Airports'
          )
          COMMENT '{{inputs.taxi}}_tripdata with description'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/iceberg'
          TBLPROPERTIES (
            'table_type'='ICEBERG',
            'format'='parquet',
            'write_compression'='snappy'
          );


      - id: athena_drop_yellow_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          DROP TABLE IF EXISTS {{ render(vars.table) }};

      - id: athena_yellow_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ render(vars.table) }}_ext (
            VendorID string                 COMMENT 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.',
            tpep_pickup_datetime timestamp  COMMENT 'The date and time when the meter was engaged',
            tpep_dropoff_datetime timestamp COMMENT 'The date and time when the meter was disengaged',
            passenger_count int             COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance double            COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            RatecodeID string               COMMENT 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride',
            store_and_fwd_flag string       COMMENT 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip',
            PULocationID string             COMMENT 'TLC Taxi Zone in which the taximeter was engaged',
            DOLocationID string             COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            payment_type int                COMMENT 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6=Voided trip',
            fare_amount double              COMMENT 'The time-and-distance fare calculated by the meter',
            extra double                    COMMENT 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges',
            mta_tax double                  COMMENT '$0.50 MTA tax that is automatically triggered based on the metered rate in use',
            tip_amount double               COMMENT 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.',
            tolls_amount double             COMMENT 'Total amount of all tolls paid in trip.',
            improvement_surcharge double    COMMENT '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.',
            total_amount double             COMMENT 'The total amount charged to passengers. Does not include cash tips.',
            congestion_surcharge double     COMMENT 'Congestion surcharge applied to trips in congested zones',
            airport_fee double              COMMENT '$1.25 for pick up only at LaGuardia and John F. Kennedy Airports'
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',', 'skip.header.line.count'='1')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/csv/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_yellow_tripdata_add_unique_id_and_filename
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE TABLE {{ render(vars.table) }}
          WITH (
            format = 'PARQUET',
            external_location = 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/parquet/{{ render(vars.table) }}/'
          ) AS
          SELECT
            md5(to_utf8(concat(
              coalesce(cast(VendorID as varchar), ''),
              coalesce(cast(tpep_pickup_datetime as varchar), ''),
              coalesce(cast(tpep_dropoff_datetime as varchar), ''),
              coalesce(PULocationID, ''),
              coalesce(DOLocationID, '')
            ))) AS unique_row_id,
            '{{ render(vars.file) }}' AS filename,
            *
          FROM {{ render(vars.table) }}_ext;

      - id: athena_yellow_insert_into
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/merge/"
        query: |
          INSERT INTO {{ kv('AWS_ATHENA_DATABASE') }}.{{ inputs.taxi }}_tripdata_iceberg
          SELECT
            S.unique_row_id,
            S.filename,
            S.VendorID,
            S.tpep_pickup_datetime,
            S.tpep_dropoff_datetime,
            S.passenger_count,
            S.trip_distance,
            S.RatecodeID,
            S.store_and_fwd_flag,
            S.PULocationID,
            S.DOLocationID,
            S.payment_type,
            S.fare_amount,
            S.extra,
            S.mta_tax,
            S.tip_amount,
            S.tolls_amount,
            S.improvement_surcharge,
            S.total_amount,
            S.congestion_surcharge,
            S.airport_fee
          FROM {{ render(vars.table) }} S
          LEFT JOIN {{ kv('AWS_ATHENA_DATABASE') }}.{{ inputs.taxi }}_tripdata_iceberg T
            ON T.unique_row_id = S.unique_row_id
          WHERE T.unique_row_id IS NULL;
     
       
  - id: if_green_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
      - id: athena_green_tripdata
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/iceberg/"
        query: |
          CREATE TABLE IF NOT EXISTS {{ kv('AWS_ATHENA_DATABASE') }}.{{inputs.taxi}}_tripdata_iceberg (
            unique_row_id           binary COMMENT 'A unique identifier for the trip, generated by hashing key trip attributes.',
            filename                string COMMENT 'The source filename from which the trip data was loaded.',
            VendorID                string COMMENT 'A code indicating the LPEP provider that provided the record.',
            lpep_pickup_datetime    timestamp COMMENT 'The date and time when the meter was engaged',
            lpep_dropoff_datetime   timestamp COMMENT 'The date and time when the meter was disengaged',
            RatecodeID              string COMMENT 'The final rate code in effect at the end of the trip.',
            store_and_fwd_flag      string COMMENT 'Indicator for store and forward trip; TRUE = store and forward, FALSE = not.',
            PULocationID            string COMMENT 'LC Taxi Zone in which the taximeter was engaged',
            DOLocationID            string COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            passenger_count         int COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance           double COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            fare_amount             double COMMENT 'The time- and distance fare calculated by the meter',
            extra                   double COMMENT 'Miscellaneous extras and surcharges (e.g. rush hour charges)',
            mta_tax                 double COMMENT 'MTA tax automatically triggered based on the metered rate in use',
            tip_amount              double COMMENT 'Tip amount (credit card tips are auto-populated; cash tips are not included)',
            tolls_amount            double COMMENT 'Total amount of all tolls paid in the trip',
            improvement_surcharge   double COMMENT 'Improvement surcharge assessed on hailed trips',
            total_amount            double COMMENT 'The total amount charged to passengers (excluding cash tips)',
            payment_type            int COMMENT 'A numeric code signifying how the passenger paid for the trip.',
            trip_type               int COMMENT 'A code indicating whether the trip was street-hail or dispatched'
          )
          COMMENT '{{inputs.taxi}}_tripdata with description'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/iceberg'
          TBLPROPERTIES (
            'table_type'='ICEBERG',
            'format'='parquet',
            'write_compression'='snappy'
          );

      - id: athena_drop_green_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          DROP TABLE IF EXISTS {{ render(vars.table) }};

      - id: athena_green_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ render(vars.table) }}_ext (
            VendorID                string COMMENT 'A code indicating the LPEP provider that provided the record.',
            lpep_pickup_datetime    timestamp COMMENT 'The date and time when the meter was engaged',
            lpep_dropoff_datetime   timestamp COMMENT 'The date and time when the meter was disengaged',
            RatecodeID              string COMMENT 'The final rate code in effect at the end of the trip.',
            store_and_fwd_flag      string COMMENT 'Indicator for store and forward trip; TRUE = store and forward, FALSE = not.',
            PULocationID            string COMMENT 'LC Taxi Zone in which the taximeter was engaged',
            DOLocationID            string COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            passenger_count         int COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance           double COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            fare_amount             double COMMENT 'The time- and distance fare calculated by the meter',
            extra                   double COMMENT 'Miscellaneous extras and surcharges (e.g. rush hour charges)',
            mta_tax                 double COMMENT 'MTA tax automatically triggered based on the metered rate in use',
            tip_amount              double COMMENT 'Tip amount (credit card tips are auto-populated; cash tips are not included)',
            tolls_amount            double COMMENT 'Total amount of all tolls paid in the trip',
            improvement_surcharge   double COMMENT 'Improvement surcharge assessed on hailed trips',
            total_amount            double COMMENT 'The total amount charged to passengers (excluding cash tips)',
            payment_type            int COMMENT 'A numeric code signifying how the passenger paid for the trip.',
            trip_type               int COMMENT 'A code indicating whether the trip was street-hail or dispatched'
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',', 'skip.header.line.count'='1')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/csv/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_green_tripdata_add_unique_id_and_filename
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE TABLE {{ render(vars.table) }}
          WITH (
            format = 'PARQUET',
            external_location = 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/parquet/{{ render(vars.table) }}/'
          ) AS
          SELECT
            md5(to_utf8(concat(
              coalesce(cast(VendorID as varchar), ''),
              coalesce(cast(lpep_pickup_datetime as varchar), ''),
              coalesce(cast(lpep_dropoff_datetime as varchar), ''),
              coalesce(cast(PULocationID as varchar), ''),
              coalesce(cast(DOLocationID as varchar), '')
            ))) AS unique_row_id,
            '{{ render(vars.file) }}' AS filename,
            *
          FROM {{ render(vars.table) }}_ext;
          

      - id: athena_green_insert_into
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/merge/"
        query: |
          INSERT INTO {{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_iceberg
          SELECT
            S.unique_row_id,
            S.filename,
            S.VendorID,
            S.lpep_pickup_datetime,
            S.lpep_dropoff_datetime,
            S.RatecodeID,
            S.store_and_fwd_flag,
            S.PULocationID,
            S.DOLocationID,
            S.passenger_count,
            S.trip_distance,
            S.fare_amount,
            S.extra,
            S.mta_tax,
            S.tip_amount,
            S.tolls_amount,
            S.improvement_surcharge,
            S.total_amount,
            S.payment_type,
            S.trip_type
          FROM {{ render(vars.table) }} S
          LEFT JOIN {{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_iceberg T
            ON T.unique_row_id = S.unique_row_id
          WHERE T.unique_row_id IS NULL;

  - id: if_fhv_data
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'fhv'}}"
    then:
      - id: athena_fhv_tripdata
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/iceberg/"
        query: |
          CREATE TABLE IF NOT EXISTS {{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_iceberg (
            unique_row_id binary        COMMENT 'A unique identifier for the trip, generated by hashing key trip attributes.',
            filename string             COMMENT 'The source filename from which the trip data was loaded.',
            dispatching_base_num string COMMENT 'The TLC Base License Number of the base that dispatched the trip',
            pickup_datetime timestamp   COMMENT 'The date and time of the trip pick-up',
            dropoff_datetime timestamp  COMMENT 'The date and time of the trip dropoff',
            PULocationID string         COMMENT 'TLC Taxi Zone in which the trip began',
            DOLocationID string         COMMENT 'TLC Taxi Zone in which the trip ended',
            SR_Flag string              COMMENT 'Indicates if the trip was part of a shared ride chain offered by a High Volume FHV company (e.g. Uber Pool, Lyft Line). For shared trips, the value is 1. For non-shared rides, this field is null'
          )
          COMMENT '{{inputs.taxi}}_tripdata with description'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/iceberg'
          TBLPROPERTIES (
            'table_type'='ICEBERG',
            'format'='parquet',
            'write_compression'='snappy'
          );

      - id: athena_drop_fhv_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          DROP TABLE IF EXISTS {{ render(vars.table) }};

      - id: athena_fhv_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ render(vars.table) }}_ext  (
            dispatching_base_num string COMMENT 'The TLC Base License Number of the base that dispatched the trip',
            pickup_datetime timestamp   COMMENT 'The date and time of the trip pick-up',
            dropoff_datetime timestamp  COMMENT 'The date and time of the trip dropoff',
            PULocationID string         COMMENT 'TLC Taxi Zone in which the trip began',
            DOLocationID string         COMMENT 'TLC Taxi Zone in which the trip ended',
            SR_Flag string              COMMENT 'Indicates if the trip was part of a shared ride chain offered by a High Volume FHV company (e.g. Uber Pool, Lyft Line). For shared trips, the value is 1. For non-shared rides, this field is null'
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',', 'skip.header.line.count'='1')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/csv/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_fhv_tripdata_add_unique_id_and_filename
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/external/"
        query: |
          CREATE TABLE {{ render(vars.table) }}
          WITH (
            format = 'PARQUET',
            external_location = 's3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/tables/parquet/{{ render(vars.table) }}/'
          ) AS
          SELECT
            md5(to_utf8(concat(
              coalesce(cast(dispatching_base_num as varchar), ''),
              coalesce(cast(pickup_datetime as varchar), ''),
              coalesce(cast(dropoff_datetime as varchar), ''),
              coalesce(cast(PULocationID as varchar), ''),
              coalesce(cast(DOLocationID as varchar), '')
            ))) AS unique_row_id,
            '{{ render(vars.file) }}'AS filename,
            *
          FROM {{ render(vars.table) }}_ext;

      - id: athena_fhv_insert_into
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/{{inputs.taxi}}/athena_output/merge/"
        query: |
          INSERT INTO {{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_iceberg
          SELECT
            S.unique_row_id,
            S.filename,
            S.dispatching_base_num,
            S.pickup_datetime,
            S.dropoff_datetime,
            S.PULocationID,
            S.DOLocationID,
            S.SR_Flag
          FROM {{ render(vars.table) }} S
          LEFT JOIN {{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_iceberg T
            ON T.unique_row_id = S.unique_row_id
          WHERE T.unique_row_id IS NULL;

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false
    
pluginDefaults:
  - type: io.kestra.plugin.aws
    values:
      accessKeyId: "{{kv('AWS_ACCESS_KEY_ID')}}"
      secretKeyId: "{{kv('AWS_SECRET_ACCESS_KEY')}}"
      region: "{{kv('AWS_REGION')}}"
      bucket: "{{kv('AWS_BUCKET_NAME')}}"

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 8 1 * *"
    inputs:
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow

  - id: fhv_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      taxi: fhv