id: 06_aws_taxi_scheduled
namespace: zoomcamp
description: |
  Best to add a label `backfill:true` from the UI to track executions created via a backfill.
  CSV data used here comes from: https://github.com/DataTalksClub/nyc-tlc-data/releases

concurrency:
    limit: 1

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [yellow, green]
    defaults: yellow

  - id: year
    type: SELECT
    displayName: Select year
    values: ["2019", "2020"]
    defaults: "2019"
    allowCustomValue: true # allows you to type 2021 from the UI for the homework ðŸ¤—

  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  s3_bucket_file: "s3://{{kv('AWS_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('AWS_ATHENA_DATABASE')}}.{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy_MM')}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: upload_to_aws_s3_bucket
    type: "io.kestra.plugin.aws.s3.Upload"
    from: "{{render(vars.data)}}"
    key: "csv/{{inputs.taxi}}/{{render(vars.file)}}"
    bucket: "{{kv('AWS_BUCKET_NAME')}}"

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'yellow' }}"
    then:
      - id: athena_yellow_tripdata
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ kv('AWS_ATHENA_DATABASE') }}.yellow_tripdata (
              unique_row_id binary,
              filename string,
              VendorID string,
              tpep_pickup_datetime timestamp,
              tpep_dropoff_datetime timestamp,
              passenger_count int,
              trip_distance double,
              RatecodeID string,
              store_and_fwd_flag string,
              PULocationID string,
              DOLocationID string,
              payment_type int,
              fare_amount double,
              extra double,
              mta_tax double,
              tip_amount double,
              tolls_amount double,
              improvement_surcharge double,
              total_amount double,
              congestion_surcharge double
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
          OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{ kv("AWS_BUCKET_NAME") }}/csv/{{ inputs.taxi }}/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_drop_yellow_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          DROP TABLE IF EXISTS {{ render(vars.table) }};

      - id: athena_yellow_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ render(vars.table) }}_ext (
              VendorID string,
              tpep_pickup_datetime timestamp,
              tpep_dropoff_datetime timestamp,
              passenger_count int,
              trip_distance double,
              RatecodeID string,
              store_and_fwd_flag string,
              PULocationID string,
              DOLocationID string,
              payment_type int,
              fare_amount double,
              extra double,
              mta_tax double,
              tip_amount double,
              tolls_amount double,
              improvement_surcharge double,
              total_amount double,
              congestion_surcharge double
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
          OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{ kv("AWS_BUCKET_NAME") }}/csv/{{ inputs.taxi }}/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_yellow_tripdata_add_unique_id_and_filename
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          CREATE TABLE {{ render(vars.table) }}
          WITH (
            format = 'PARQUET',
            external_location = 's3://{{ kv("AWS_BUCKET_NAME") }}/tables/{{ inputs.taxi }}/{{ render(vars.table) }}/'
          ) AS
          SELECT
            md5(to_utf8(concat(
              coalesce(cast(VendorID as varchar), ''),
              coalesce(cast(tpep_pickup_datetime as varchar), ''),
              coalesce(cast(tpep_dropoff_datetime as varchar), ''),
              coalesce(PULocationID, ''),
              coalesce(DOLocationID, '')
            ))) AS unique_row_id,
            '{{ render(vars.file) }}' AS filename,
            *
          FROM {{ render(vars.table) }}_ext;

      - id: athena_yellow_insert_into
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          INSERT INTO {{ kv('AWS_ATHENA_DATABASE') }}.yellow_tripdata
          SELECT
            S.unique_row_id,
            S.filename,
            S.VendorID,
            S.tpep_pickup_datetime,
            S.tpep_dropoff_datetime,
            S.passenger_count,
            S.trip_distance,
            S.RatecodeID,
            S.store_and_fwd_flag,
            S.PULocationID,
            S.DOLocationID,
            S.payment_type,
            S.fare_amount,
            S.extra,
            S.mta_tax,
            S.tip_amount,
            S.tolls_amount,
            S.improvement_surcharge,
            S.total_amount,
            S.congestion_surcharge
          FROM {{ render(vars.table) }} S
          LEFT JOIN {{ kv('AWS_ATHENA_DATABASE') }}.yellow_tripdata T
            ON T.unique_row_id = S.unique_row_id
          WHERE T.unique_row_id IS NULL;
     

  - id: if_green_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
      - id: athena_green_tripdata
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/athena_output/{{inputs.taxi}}"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{kv('AWS_ATHENA_DATABASE')}}.green_tripdata (
              unique_row_id binary,
              filename string,
              VendorID string,
              lpep_pickup_datetime timestamp,
              lpep_dropoff_datetime timestamp,
              store_and_fwd_flag string,
              RatecodeID string,
              PULocationID string,
              DOLocationID string,
              passenger_count int,
              trip_distance double,
              fare_amount double,
              extra double,
              mta_tax double,
              tip_amount double,
              tolls_amount double,
              ehail_fee double,
              improvement_surcharge double,
              total_amount double,
              payment_type int,
              trip_type string,
              congestion_surcharge double
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/csv/{{inputs.taxi}}/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_drop_green_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          DROP TABLE IF EXISTS {{ render(vars.table) }};

      - id: athena_green_tripdata_ext
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/athena_output/{{inputs.taxi}}"
        query: |
          CREATE EXTERNAL TABLE IF NOT EXISTS {{ render(vars.table) }}_ext (
              VendorID string,
              lpep_pickup_datetime timestamp,
              lpep_dropoff_datetime timestamp,
              store_and_fwd_flag string,
              RatecodeID string,
              PULocationID string,
              DOLocationID string,
              passenger_count int,
              trip_distance double,
              fare_amount double,
              extra double,
              mta_tax double,
              tip_amount double,
              tolls_amount double,
              ehail_fee double,
              improvement_surcharge double,
              total_amount double,
              payment_type int,
              trip_type string,
              congestion_surcharge double
          )
          ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
          WITH SERDEPROPERTIES ('field.delim' = ',')
          STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          LOCATION 's3://{{kv('AWS_BUCKET_NAME')}}/csv/{{inputs.taxi}}/'
          TBLPROPERTIES ('classification' = 'csv');

      - id: athena_green_tripdata_add_unique_id_and_filename
        type: io.kestra.plugin.aws.athena.Query
        database: "{{ kv('AWS_ATHENA_DATABASE') }}"
        outputLocation: "s3://{{ kv('AWS_BUCKET_NAME') }}/athena_output/{{ inputs.taxi }}"
        query: |
          CREATE TABLE {{ render(vars.table) }}
          WITH (
            format = 'PARQUET',
            external_location = 's3://{{ kv('AWS_BUCKET_NAME') }}/tables/{{ inputs.taxi }}/{{ render(vars.table) }}/'
          ) AS
          SELECT
            md5(to_utf8(concat(
              coalesce(cast(VendorID as varchar), ''),
              coalesce(cast(lpep_pickup_datetime as varchar), ''),
              coalesce(cast(lpep_dropoff_datetime as varchar), ''),
              coalesce(cast(PULocationID as varchar), ''),
              coalesce(cast(DOLocationID as varchar), '')
            ))) AS unique_row_id,
            '{{ render(vars.file) }}' AS filename,
            *
          FROM {{ render(vars.table) }}_ext;

      - id: athena_green_insert_into
        type: io.kestra.plugin.aws.athena.Query
        database: "{{kv('AWS_ATHENA_DATABASE')}}"
        outputLocation: "s3://{{kv('AWS_BUCKET_NAME')}}/athena_output/{{inputs.taxi}}"
        query: |
          INSERT INTO {{kv('AWS_ATHENA_DATABASE')}}.green_tripdata
          SELECT
            S.unique_row_id,
            S.filename,
            S.VendorID,
            S.lpep_pickup_datetime,
            S.lpep_dropoff_datetime,
            S.store_and_fwd_flag,
            S.RatecodeID,
            S.PULocationID,
            S.DOLocationID,
            S.passenger_count,
            S.trip_distance,
            S.fare_amount,
            S.extra,
            S.mta_tax,
            S.tip_amount,
            S.tolls_amount,
            S.ehail_fee,
            S.improvement_surcharge,
            S.total_amount,
            S.payment_type,
            S.trip_type,
            S.congestion_surcharge
          FROM {{ render(vars.table) }} S
          LEFT JOIN {{kv('AWS_ATHENA_DATABASE')}}.green_tripdata T
            ON T.unique_row_id = S.unique_row_id
          WHERE T.unique_row_id IS NULL;

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false
    
pluginDefaults:
  - type: io.kestra.plugin.aws
    values:
      accessKeyId: "{{kv('AWS_ACCESS_KEY_ID')}}"
      secretKeyId: "{{kv('AWS_SECRET_ACCESS_KEY')}}"
      region: "{{kv('AWS_REGION')}}"
      bucket: "{{kv('AWS_BUCKET_NAME')}}"

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow